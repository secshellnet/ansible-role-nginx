---
- name: Install nginx
  ansible.builtin.package:
    name: nginx
    state: present
  become: true

#- name: "Adjust firewall rules for nginx"
#  block:
#    - name: "Iptables: Allow http and https"
#      ansible.builtin.iptables:
#        chain: INPUT
#        protocol: tcp
#        destination_ports: ["80", "443"]
#        jump: ACCEPT
#        ip_version: "{{ item }}"
#      become: true
#      with_items: [ipv4, ipv6]

#    - name: "Iptables: Save current state in /etc/iptables/"
#      community.general.iptables_state:
#        ip_version: "ip{{ item }}"
#        state: saved
#        path: "/etc/iptables/rules.{{ item }}"
#      become: true
#      with_items:
#        - [v4, v6]

#- name: "Create netbox service for http"
#  netbox.netbox.netbox_service:
#    netbox_url: "{{ netbox_url }}"
#    netbox_token: "{{ netbox_token }}"
#    data:
#      virtual_machine: "{{ inventory_hostname }}"
#      name: http
#      port: 80
#      protocol: TCP
#    state: present
#  delegate_to: localhost
#  when:
#    - netbox_url
#    - netbox_token

#- name: "Create netbox service for https"
#  netbox.netbox.netbox_service:
#    netbox_url: "{{ netbox_url }}"
#    netbox_token: "{{ netbox_token }}"
#    data:
#      virtual_machine: "{{ inventory_hostname }}"
#      name: https
#      port: 443
#      protocol: TCP
#    state: present
#  delegate_to: localhost
#  when:
#    - netbox_url
#    - netbox_token

- name: "Check if default vhost is enabled"
  ansible.builtin.stat:
    path: "/etc/nginx/sites-enabled/default"
  register: default_nginx_vhost

- name: "Disable default nginx vhost"
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  become: true
  when: default_nginx_vhost.stat.exists
  notify: "Reload nginx"

- name: "Delete default nginx vhost"
  ansible.builtin.file:
    path: "/etc/nginx/sites-available/default"
    state: absent
  become: true
  when: default_nginx_vhost.stat.exists

- name: "Check if acme.sh is already installed"
  ansible.builtin.stat:
    path: "/root/.acme.sh"
  register: acmesh_installed
  become: true

- name: "Install acme.sh"
  ansible.builtin.include_tasks: acmesh_install.yaml
  when:
    - nginx_cert_email is defined
    - not acmesh_installed.stat.exists

- name: "Get a list of all existing vhosts"
  ansible.builtin.find:
    paths: /etc/nginx/sites-available
    file_type: any
    recurse: false
  register: existing_vhosts_obj

- name: "Transform existing and defined vhosts into compareable format"
  ansible.builtin.set_fact:
    defined_vhosts: "{{ nginx_vhosts | map(attribute='domain') | list }}"
    existing_vhosts: "{{ existing_vhosts_obj.files | map(attribute='path') | map('basename') | list }}"

- name: "Disable nginx vhosts which are no longer present in the ansible inventory"
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/{{ item }}"
    state: absent
  loop: "{{ existing_vhosts | difference(defined_vhosts) }}"
  become: yes
  notify: "Reload nginx"

- name: "Delete nginx vhosts which are no longer present in the ansible inventory"
  ansible.builtin.file:
    path: "/etc/nginx/sites-available/{{ item }}"
    state: absent
  loop: "{{ existing_vhosts | difference(defined_vhosts) }}"
  become: yes

- name: "Delete certificates of nginx vhosts which are no longer present in the ansible inventory"
  ansible.builtin.file:
    path: "/root/.acme.sh/{{ item }}_ecc/"
    state: absent
  loop: "{{ existing_vhosts | difference(defined_vhosts) }}"
  become: yes

- name: "Create vhosts"
  ansible.builtin.include_tasks: vhost.yaml
  loop: "{{ nginx_vhosts | default([]) }}"
  vars:
    vhost: "{{ item }}"
